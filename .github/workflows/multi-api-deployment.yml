name: Deploy Multi License API with Rollback Options

on:
  workflow_dispatch:
    inputs:
      ENV:
        description: 'Environment to deploy (dev/staging/prod)'
        required: true
        default: "stage"
      ROLLBACK_TAG:
        description: 'Optional: Previous build tag (e.g., 2025.06.30.02). If left blank, deploys latest.'
        required: false

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  TF_BUCKET: test-s3-idlmreplatforming-tfstate

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.ENV || 'stage' }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout feature/btl-77 codebase
        uses: actions/checkout@v4
        with:
          ref: feature/btl-77

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS Account ID
        id: aws-account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account_id=$ACCOUNT_ID" >> "$GITHUB_OUTPUT"

      - name: Set dynamic backup bucket name
        run: echo "BACKUP_BUCKET=test-s3-idlmreplatforming-artifact" >> $GITHUB_ENV

      - name: Terraform Apply VPC
        if: github.event_name == 'workflow_dispatch' || contains(join(github.event.commits.*.modified), 'infra/')
        run: |
          cd infra/vpc
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/vpc/terraform.tfstate" -backend-config="region=${AWS_REGION}"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      - name: Terraform Apply NLB
        if: github.event_name == 'workflow_dispatch' || contains(join(github.event.commits.*.modified), 'infra/')
        run: |
          cd infra/nlb
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/nlb/terraform.tfstate" -backend-config="region=${AWS_REGION}"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      - name: Terraform Apply API Gateway
        if: github.event_name == 'workflow_dispatch' || contains(join(github.event.commits.*.modified), 'infra/')
        run: |
          cd infra/rest-api
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/rest-api/terraform.tfstate" -backend-config="region=${AWS_REGION}"
          terraform refresh -var-file="${{ github.event.inputs.ENV }}.tfvars"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      - name: Terraform Apply CloudWatch
        if: github.event_name == 'workflow_dispatch' || contains(join(github.event.commits.*.modified), 'infra/')
        run: |
          cd infra/cloudwatch
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/cloudwatch/terraform.tfstate" -backend-config="region=${AWS_REGION}"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      - name: Terraform Apply ECR
        id: ecr
        run: |
          cd infra/ecr
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/ecr/terraform.tfstate" -backend-config="region=${AWS_REGION}"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"
          ECR_REPO_URL=$(terraform output -raw ecr_repository_url 2>/dev/null | tr -d '\r')
           if [ -z "$ECR_REPO_URL" ]; then
            echo "::error::Could not read 'ecr_repository_url' from Terraform output"
            terraform output || true
            exit 1
          fi
          echo "ECR_REPO_URL=$ECR_REPO_URL" >> "$GITHUB_ENV"
          echo "Using ECR: $ECR_REPO_URL"

      - name: Terraform Apply SSM
        id: ssm
        run: |
          cd infra/ssm
          PARAM_NAME="/idlms/shared/${{ github.event.inputs.ENV }}/.env"
          if aws ssm get-parameter --name "$PARAM_NAME" --with-decryption > /dev/null 2>&1; then
            ENV_CONTENT=$(aws ssm get-parameter --name "$PARAM_NAME" --with-decryption --query "Parameter.Value" --output text)
            BASE64_ENV=$(echo "$ENV_CONTENT" | base64 -w 0)
          else
            BASE64_ENV=$(echo "# placeholder env" | base64 -w 0)
          fi
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/ssm/terraform.tfstate" -backend-config="region=${AWS_REGION}"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars" -var="app_env_content=${BASE64_ENV}"
          SSM_ENV_PARAM=$(terraform output -raw ssm_env_param_name | tr -d '\r\n' | sed 's/^ssm:\/\///')
          echo "SSM_ENV_PARAM=$SSM_ENV_PARAM" >> $GITHUB_ENV

      - name: Terraform Apply S3
        id: s3_apply
        run: |
          cd infra/s3
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/s3/terraform.tfstate" -backend-config="region=${AWS_REGION}"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      - name: Upload docker-compose.yml to S3
        run: |
          echo "Uploading to bucket: $BACKUP_BUCKET"
          aws s3 cp docker/docker-compose.yml s3://$BACKUP_BUCKET/${{ github.event.inputs.ENV }}/docker-compose.yml

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate build tags
        id: tags
        run: |
          ECR_REPO_URL="${{ env.ECR_REPO_URL }}"
          DATE_TAG=$(date +'%Y.%m.%d')
          BUILD_NUM=$(printf "%03d" $GITHUB_RUN_NUMBER)
          BUILD_TAG="${DATE_TAG}.${BUILD_NUM}"
          IMAGE_URI="${ECR_REPO_URL}:${BUILD_TAG}"
          LATEST_URI="${ECR_REPO_URL}:latest"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "LATEST_URI=$LATEST_URI" >> $GITHUB_ENV
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV

      - name: Build and tag Docker image
        run: docker build -t $IMAGE_URI -t $LATEST_URI -f docker/Dockerfile src

      - name: Push Docker images to ECR
        run: |
          docker push $IMAGE_URI
          docker push $LATEST_URI

      - name: Determine tag to deploy
        id: determine-tag
        run: |
          TAG="${{ github.event.inputs.ROLLBACK_TAG }}"
          if [ -z "$TAG" ]; then TAG="${{ env.BUILD_TAG }}"; fi
          echo "TAG_TO_DEPLOY=$TAG" >> $GITHUB_ENV

      - name: Deploy containers with rollback logic via SSM (health & simple error)
        run: |
          TAG_TO_DEPLOY="${{ env.TAG_TO_DEPLOY }}"
          ENV="${{ github.event.inputs.ENV }}"
          ECR_REPO_URL="${{ env.ECR_REPO_URL }}"
          AWS_REGION="${{ env.AWS_REGION }}"
          BACKUP_BUCKET="${{ env.BACKUP_BUCKET }}"
          SSM_ENV_PARAM="${{ env.SSM_ENV_PARAM }}"
          REG_HOST="${ECR_REPO_URL%/*}"

          if [ -z "$SSM_ENV_PARAM" ]; then
            echo "::error::SSM_ENV_PARAM is empty; ensure the Terraform SSM step exported it"
            exit 1
          fi

          # Pick newest running instance and show it
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=Backend API IDLMS-${ENV}" "Name=instance-state-name,Values=running" \
            --query "sort_by(Reservations[].Instances[], &LaunchTime)[-1].InstanceId" \
            --region "$AWS_REGION" \
            --output text)

          echo "Selected INSTANCE_ID: $INSTANCE_ID (region: $AWS_REGION)"
          if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" = "None" ]; then
            echo "::error::pods not up"
            exit 1
          fi

          # Build params.json (no shell escaping issues)
          cat > params.json <<'JSON'
          {
            "commands": [
              "set -euo pipefail",
              "echo '---- REMOTE START ----'",
              "echo whoami=$(whoami)",
              "echo host=$(hostname)",
              "echo ip=$(hostname -I 2>/dev/null || true)",
              "cd /home/ubuntu",
              "pwd",

              "apt-get update -y && DEBIAN_FRONTEND=noninteractive apt-get install -y docker.io curl",
              "systemctl enable --now docker || service docker start || true",

              "echo 'Fetching app env from SSM...'",
              "ENV_CONTENT=$(aws ssm get-parameter --name __SSM_PARAM__ --with-decryption --query 'Parameter.Value' --output text --region __REGION__ || echo '')",
              "printf '%s\nBUILD_TAG=__TAG__\nIMAGE_REPO=__ECR_URL__\n' \"$ENV_CONTENT\" > .env",
              "echo '--- .env written ---'",
              "grep -E '^(PORT|PORT1|PORT2|BUILD_TAG|IMAGE_REPO)=' .env || true",

              "echo 'Downloading docker-compose.yml from S3...'",
              "aws s3 cp s3://__BACKUP__/__ENV__/docker-compose.yml docker-compose.yml --region __REGION__",
              "echo '--- docker-compose.yml downloaded ---'",
              "ls -la",
              "stat docker-compose.yml || true",

              "if ! command -v docker-compose >/dev/null 2>&1; then curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64 -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose && ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose; fi",
              "docker --version && docker-compose --version",

              "echo 'Logging in to ECR and starting containers...'",
              "aws ecr get-login-password --region __REGION__ | docker login --username AWS --password-stdin __REG_HOST__",
              "docker-compose --env-file .env down || true",
              "docker-compose --env-file .env pull --ignore-pull-failures",
              "docker-compose --env-file .env up -d --force-recreate --build",

              "sleep 10",

              "echo 'Waiting for health (api1, api2, api3)...'",
              "TRIES=0; MAX=12; OK=0; \
               while [ $TRIES -lt $MAX ]; do \
                 H1=$(docker inspect -f '{{.State.Health.Status}}' api1 2>/dev/null || echo starting); \
                 H2=$(docker inspect -f '{{.State.Health.Status}}' api2 2>/dev/null || echo starting); \
                 H3=$(docker inspect -f '{{.State.Health.Status}}' api3 2>/dev/null || echo starting); \
                 echo attempt=$TRIES h1=$H1 h2=$H2 h3=$H3; \
                 if [ \"$H1\" = healthy ] && [ \"$H2\" = healthy ] && [ \"$H3\" = healthy ]; then OK=1; break; fi; \
                 TRIES=$((TRIES+1)); sleep 10; \
               done; \
               if [ \"$OK\" -ne 1 ]; then echo 'pods not up'; exit 1; fi",

              "aws ssm put-parameter --name /idlms/license-api/last-successful-build --value __TAG__ --type String --overwrite --region __REGION__",
              "touch /home/ubuntu/deploy___TAG__.ok",
              "echo '---- REMOTE DONE ----'"
            ]
          }
          JSON

          # Substitute placeholders safely
          sed -i \
            -e "s|__REGION__|$AWS_REGION|g" \
            -e "s|__SSM_PARAM__|$SSM_ENV_PARAM|g" \
            -e "s|__TAG__|$TAG_TO_DEPLOY|g" \
            -e "s|__ECR_URL__|$ECR_REPO_URL|g" \
            -e "s|__BACKUP__|$BACKUP_BUCKET|g" \
            -e "s|__ENV__|$ENV|g" \
            -e "s|__REG_HOST__|$REG_HOST|g" \
            params.json

          # Send the command
          CMD_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "$INSTANCE_ID" \
            --comment "Deploy containers with health check" \
            --parameters file://params.json \
            --query "Command.CommandId" --output text --region "$AWS_REGION")

          echo "SSM CommandId: $CMD_ID"

          # Wait and surface a simple error if it fails
          while true; do
            STATUS=$(aws ssm list-command-invocations \
              --command-id "$CMD_ID" \
              --details \
              --query 'CommandInvocations[0].Status' \
              --output text \
              --region "$AWS_REGION")
            case "$STATUS" in
              Pending|InProgress|Delayed) sleep 10 ;;
              Success) break ;;
              *) echo "::error::pods not up"; exit 1 ;;
            esac
          done

          # (Optional) print remote output for quick verification
          aws ssm get-command-invocation \
            --command-id "$CMD_ID" \
            --instance-id "$INSTANCE_ID" \
            --region "$AWS_REGION" \
            --query 'StandardOutputContent' --output text | tail -n 80 || true
